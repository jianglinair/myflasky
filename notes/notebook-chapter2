第2章 程序的基本结构

Chapter2:
1. 动态url: 默认string, 其余有 int, float, path.

2. Falsk 使用上下文让特定的变量在一个线程中全局可访问,与此同时却不会干扰其他线程。
上下文：程序上下文和请求上下文

变量名      | 上下文     | 说   明
------------|------------|-------------------------------------------------------
current_app | 程序上下文 | 当前激活程序的程序实例
------------|------------|-------------------------------------------------------
     g      | 程序上下文 | 处理请求时用作临时存储的对象。每次请求都会重设这个变量
------------|------------|-------------------------------------------------------
request     | 请求上下文 | 请求对象,封装了客户端发出的 HTTP 请求中的内容
------------|------------|-------------------------------------------------------
session     | 请求上下文 | 用户会话,用于存储请求之间需要“记住”的值的词典

============================
>>> from hello import app
>>> from flask import current_app
>>> current_app.name
...
RuntimeError: working outside of application context
>>> app_ctx = app.app_context()
>>> app_ctx.push()
>>> current_app.name
'hello'
>>> app_ctx.pop()
===============================
需要将 app context 压栈后方可使用4个上下文

3. 请求钩子
请求钩子使用修饰器实现。Flask 支持以下 4 种钩子：
• before_first_request :注册一个函数,在处理第一个请求之前运行。
• before_request :注册一个函数,在每次请求之前运行。
• after_request :注册一个函数,如果没有未处理的异常抛出,在每次请求之后运行。
• teardown_request :注册一个函数,即使有未处理的异常抛出,也在每次请求之后运行。
在请求钩子函数和视图函数之间共享数据一般使用上下文全局变量 g 。例如, before_request
处理程序可以从数据库中加载已登录用户,并将其保存到 g.user 中。随后调用视图函数时,
视图函数再使用 g.user 获取用户。

4. 响应
参数：字符串，状态码， 头部字典
make_response()函数也是接受这3个参数
redireact()函数用于重定向
abort()函数接收错误码作为参数，放弃处理该请求

5. Flask扩展
