第7章 大型程序的结构

1. 项目结构
Flask 程序的基本结构如示例 7-1 所示：

|-flasky
    |-app/
        |-templates/
        |-static/
        |-main/
            |-__init__.py
            |-errors.py
            |-forms.py
            |-views.py
        |-__init__.py
        |-email.py
        |-models.py
    |-migrations/
    |-tests/
        |-__init__.py
        |-test*.py
    |-venv/
    |-requirements.txt
    |-config.py
    |-manage.py

这种结构有 4 个顶级文件夹:
• Flask 程序一般都保存在名为 app 的包中;
• 和之前一样,migrations 文件夹包含数据库迁移脚本;
• 单元测试编写在 tests 包中;
• 和之前一样,venv 文件夹包含 Python 虚拟环境。

同时还创建了3个新文件:
• requirements.txt 列出了所有依赖包,便于在其他电脑中重新生成相同的虚拟环境;
• config.py 存储配置;
• manage.py 用于启动程序以及其他的程序任务。

2. 配置选项
使用层次结构的配置类
基类 Config 中包含通用配置,子类分别定义专用的配置。如果需要,还可添加其他配置类。

配置类可以定义 init_app() 类方法,其参数是程序实例。在这个方法中,可以执行对当前
环境的配置初始化。现在,基类 Config 中的 init_app() 方法为空。

3. 程序包
程序包用来保存程序的所有代码、模板和静态文件。我们可以把这个包直接称为 app.

1) 使用程序工厂函数
在单个文件中开发程序很方便,但却有个很大的缺点,因为程序在全局作用域中创建,所
以无法动态修改配置。运行脚本时,程序实例已经创建,再修改配置为时已晚。这一点对
单元测试尤其重要,因为有时为了提高测试覆盖度,必须在不同的配置环境中运行程序。

这个问题的解决方法是延迟创建程序实例,把创建过程移到可显式调用的工厂函数中。这
种方法不仅可以给脚本留出配置程序的时间,还能够创建多个程序实例,这些实例有时在
测试中非常有用。程序的工厂函数在 app 包的构造文件中定义,如 create_app() 函数
所示。

构造文件导入了大多数正在使用的 Flask 扩展。由于尚未初始化所需的程序实例,所以没
有初始化扩展,创建扩展类时没有向构造函数传入参数。 create_app() 函数就是程序的工
厂函数,接受一个参数,是程序使用的配置名。配置类在 config.py 文件中定义,其中保存
的配置可以使用 Flask app.config 配置对象提供的 from_object() 方法直接导入程序。
至于配置对象,则可以通过名字从 config 字典中选择。程序创建并配置好后,就能初始化
扩展了。在之前创建的扩展对象上调用 init_app() 可以完成初始化过程。

2) 在蓝本中实现程序功能
转换成程序工厂函数的操作让定义路由变复杂了。在单脚本程序中,程序实例存在于全
局作用域中,路由可以直接使用 app.route 修饰器定义。但现在程序在运行时创建,只
有调用 create_app() 之后才能使用 app.route 修饰器,这时定义路由就太晚了。和路由
一样,自定义的错误页面处理程序也面临相同的困难,因为错误页面处理程序使用 app.
errorhandler 修饰器定义。

Flask 使用蓝本提供了更好的解决方法。蓝本和程序类似,也可以定义路由。不同的
是,在蓝本中定义的路由处于休眠状态,直到蓝本注册到程序上后,路由才真正成为程序
的一部分。使用位于全局作用域中的蓝本时,定义路由的方法几乎和单脚本程序一样。
和程序一样,蓝本可以在单个文件中定义,也可使用更结构化的方式在包中的多个模块中
创建。为了获得最大的灵活性,程序包中创建了一个子包(main),用于保存蓝本。

4. 需求文件
程序中必须包含一个 requirements.txt 文件,用于记录所有依赖包及其精确的版本号。如果
要在另一台电脑上重新生成虚拟环境,这个文件的重要性就体现出来了,例如部署程序时
使用的电脑。 pip 可以使用如下命令自动生成这个文件:

(venv) $ pip freeze > requirements.txt

安装或升级包后,最好更新这个文件。

如果你要创建这个虚拟环境的完全副本,可以创建一个新的虚拟环境,并在其上运行以下
命令:

(venv) $ pip install -r requirements.txt

5. 单元测试

